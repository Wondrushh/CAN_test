/**
 * @file Dragon_CANbus.h
 * @copyright TU Brno Racing
 * @author Tomas Lorenc
 * @date 2019-2021
 * @brief Header file for dragon CAN communication.
 * @ver 2.3
 * File contain core function.
 */

#ifdef __cplusplus
extern "C"
{
#endif  //__cplusplus

#ifndef INC_DRAGON_CANBUS_H_
  #define INC_DRAGON_CANBUS_H_

/*
******************************************************************************************************************
HOW TO USE  ->  visit README
Example   main.c
******************************************************************************************************************

CAN_HandleTypeDef hcan;              //generated by CubeMX

main{
 static void MX_CAN1_Init(void);    //generated by CubeMX

 CANbus_Init(&hcan);     OR      CANbus_Init(&hcan1, &hcan3);       //init function
 CANbus_FilterInit();                                                //init filter

 if (HAL_CAN_Start(&hcan) != HAL_OK){        //start interface
  Error_Handler();
 }

 uint8_t aData[8] = {'a','b','c','d','e','f','g','h'};          //create payload
 if (CAN1bus_SendData(CANgen_ID_TEMPERATURE, 2, CAN_RTR_DATA | CANdef_, aData) != HAL_OK){  //send data
  Error_Handler();
 }

 while(1){

#ifndef CAN1def_ONLY_INTERRUPT_MODE
  if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0){
        //if message pending in Fifo
   CAN1bus_ReadProcessFIFO0();  //read data
  }
#endif //CAN1def_ONLY_INTERRUPT_MODE
#ifdef DUAL_CAN_ACTIVATE
#ifndef CAN2def_ONLY_INTERRUPT_MODE
  if (HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) != 0){
        //if message pending in Fifo
   CAN2bus_ReadProcessFIFO0();  //read data
  }
#endif //CAN2def_ONLY_INTERRUPT_MODE
#endif  //DUAL_CAN_ACTIVATE

 }
}

//----  CallBack function example  -----
void CANgen_func_temperature(uint8_t aPayload[])         //test callback function
{

}
*/


/**
* @brief HAL libraries
*/
//#include "stm32f0xx_hal.h"
//#include "stm32f1xx_hal.h"
//#include "stm32f2xx_hal.h"
//#include "stm32f3xx_hal.h"
#include "stm32l4xx_hal.h"


/**
* @brief Device Dragon CAN libraries
*/
#include "Dragon_CANbus_filter.h"


/**
* @brief Activate Dual CAN
*/
//#define _DUAL_CAN_ACTIVATE


/**
* @brief Switch ONLY_INTERRUPT_MODE or SEMI_INTERRUPT_MODE.
*  ONLY_INTERRUPT_MODE = When receive msg to FIFO0 -> call interrupt.
*  SEMI_INTERRUPT_MODE = For receive msg from FIFO0 must use pool method
*/
#define _CAN1def_ONLY_INTERRUPT_MODE
//#define _CAN2def_ONLY_INTERRUPT_MODE


/**
* @brief  Define used callback function
*   Available sentence can find in Dragon_CANbus_filter.h
*   Example: #define _CANgen_USED_TEMPERATURE
*/

//#define _CANgen_USED_TEMPERATURE   /*example*/
#define _CANcrit_USED_RESET

/**
* @brief Define callback func for CAN1
* @note For select -> uncomment
*/
//#define __CAN1_CANgenBus    //CAN_gen
//#define __CAN1_CANinvBus    //CAN_inv
#define __CAN1_CANcritBus   //CAN_crit
//#define __CAN1_CANamsBus    //CAN_ams

/**
* @brief Define filter constants for CAN1
* @note For select -> uncomment
*/
//#define __CAN1_FILTERLIST  _dragon_CANbus_filterList_VCU_gen           //VCU - CAN_gen
//#define __CAN1_FILTERLIST  _dragon_CANbus_filterList_VCU_crit          //VCU - CAN_crit
//#define __CAN1_FILTERLIST  _dragon_CANbus_filterList_ESP_crit          //ESP - CAN_crit
//#define __CAN1_FILTERLIST  _dragon_CANbus_filterList_ESP_inv           //ESP - CAN_inv
#define __CAN1_FILTERLIST  _dragon_CANbus_filterList_PEDAL_crit        //PEDAL - CAN_crit
//#define __CAN1_FILTERLIST  _dragon_CANbus_filterList_AMSM_gen          //AMSM - CAN_gen
//#define __CAN1_FILTERLIST  _dragon_CANbus_filterList_AMSM_ams          //AMSM - CAN_ams
//#define __CAN1_FILTERLIST  _dragon_CANbus_filterList_AMSS_ams          //AMSS - CAN_ams
//#define __CAN1_FILTERLIST  _dragon_CANbus_filterList_PUMP_gen          //PUMP - CAN_gen
//#define __CAN1_FILTERLIST  _dragon_CANbus_filterList_WHEEL_gen         //WHEEL - CAN_gen
//#define __CAN1_FILTERLIST  _dragon_CANbus_filterList_DATALOG_gen       //DATALOG - CAN_gen



/**
* @brief Define callback func for CAN2
* @note For select -> uncomment
*/
//#define __CAN2_CANgenBus     //CAN_gen
//#define __CAN2_CANinvBus    //CAN_inv
//#define __CAN2_CANcritBus   //CAN_crit
//#define __CAN2_CANamsBus    //CAN_ams


/**
* @brief Define filter constants for CAN2
* @note For select -> uncomment #define
*/
//#define __CAN2_FILTERLIST  _dragon_CANbus_filterList_VCU_gen           //VCU - CAN_gen
//#define __CAN2_FILTERLIST  _dragon_CANbus_filterList_VCU_crit          //VCU - CAN_crit
//#define __CAN2_FILTERLIST  _dragon_CANbus_filterList_ESP_crit          //ESP - CAN_crit
//#define __CAN2_FILTERLIST  _dragon_CANbus_filterList_ESP_inv           //ESP - CAN_inv
//#define __CAN2_FILTERLIST  _dragon_CANbus_filterList_PEDAL_crit        //PEDAL - CAN_crit
//#define __CAN2_FILTERLIST  _dragon_CANbus_filterList_AMSM_gen          //AMSM - CAN_gen
//#define __CAN2_FILTERLIST  _dragon_CANbus_filterList_AMSM_ams          //AMSM - CAN_ams
//#define __CAN2_FILTERLIST  _dragon_CANbus_filterList_AMSS_ams          //AMSS - CAN_ams
//#define __CAN2_FILTERLIST  _dragon_CANbus_filterList_PUMP_gen          //PUMP - CAN_gen
//#define __CAN2_FILTERLIST  _dragon_CANbus_filterList_WHEEL_gen         //WHEEL - CAN_gen
//#define __CAN2_FILTERLIST  _dragon_CANbus_filterList_DATALOG_gen       //DATALOG - CAN_gen


/**
* @brief Allow send extended messages. Only for AMS in mode charging.
* @note Use CAN1 for send extended messages
* @note For select -> uncomment #define
*/

//#define __EXTENDED_CAN_ACTIVATE




/*
 * ----------------  STOP  EDITING  ----------------------------------------------
 */




/** @defgroup DRAGON_CANdef_CompleteSend CAN Remote Transmission Request
  * @{
  */
#define CANdef_ALLMSG            (0x00000004U)  /*!< All msg will been send   */
#define CANdef_NEWMSG            (0x00000000U)  /*!< Only new msg will been send */
/**
  * @}
  */

/**
*
* @brief  Setup for set current can bus
*/
#ifdef __CAN1_CANgenBus
#define __CAN1_CALLBACKLIST _dragon_CANbus_RxFuncList_gen
#endif

#ifdef __CAN1_CANcritBus
  #define __CAN1_CALLBACKLIST _dragon_CANbus_RxFuncList_crit
#endif

#ifdef __CAN1_CANinvBus
  #define __CAN1_CALLBACKLIST _dragon_CANbus_RxFuncList_inv
#endif

#ifdef __CAN1_CANamsBus
  #define __CAN1_CALLBACKLIST _dragon_CANbus_RxFuncList_ams
#endif

#ifdef __CAN2_CANgenBus
  #define __CAN2_CALLBACKLIST _dragon_CANbus_RxFuncList_gen
#endif

#ifdef __CAN2_CANcritBus
  #define __CAN2_CALLBACKLIST _dragon_CANbus_RxFuncList_crit
#endif

#ifdef __CAN2_CANinvBus
  #define __CAN2_CALLBACKLIST _dragon_CANbus_RxFuncList_inv
#endif

#ifdef __CAN2_CANamsBus
  #define __CAN2_CALLBACKLIST _dragon_CANbus_RxFuncList_ams
#endif


/**
* @brief Set up a CAN_Handle pointer a interrupts
* @param *hcan Pointer to a CAN_HandleTypeDef structure.
* @return Status (value of @ref HAL_StatusTypeDef)
*/
#ifdef _DUAL_CAN_ACTIVATE
HAL_StatusTypeDef CANbus_Init(CAN_HandleTypeDef *hcan1, CAN_HandleTypeDef *hcan2);
#else //_DUAL_CAN_ACTIVATE
HAL_StatusTypeDef CANbus_Init(CAN_HandleTypeDef *hcan1);
#endif //_DUAL_CAN_ACTIVATE

/**
* @brief Set up a CAN filter banks
* @note If you use EXTENDED ID call both functions (CANbus_FilterInit,CANbus_ExtendedFilterInit)
* @param None
* @return Status (value of @ref HAL_StatusTypeDef)
*/
HAL_StatusTypeDef CANbus_FilterInit();

#ifdef __EXTENDED_CAN_ACTIVATE
HAL_StatusTypeDef CANbus_ExtendedFilterInit();
#endif //__EXTENDED_CAN_ACTIVATE
/**
*
* @brief  Read messages from CAN1 FIFO0. (Standard and Low priority)
* @param None
* @return None
*/
void CAN1bus_ReadProcessFIFO0();

/**
*
* @brief  Read messages from CAN1 FIFO1. (High priority)
* @param None
* @return None
*/
void CAN1bus_ReadProcessFIFO1();

#ifdef _DUAL_CAN_ACTIVATE

/**
*
* @brief  Read messages from CAN2 FIFO0. (Standard and Low priority)
* @param None
* @return None
*/
void CAN2bus_ReadProcessFIFO0();

/**
*
* @brief  Read messages from CAN2 FIFO1. (High priority)
* @param None
* @return None
*/
void CAN2bus_ReadProcessFIFO1();

#endif  //_DUAL_CAN_ACTIVATE

/**
* @info Send message.
* @brief  Add message to hardware mailbox or buffer
* @param msgID 11-bit ID @ref dragon_CANdef_XXX_ID
* @param msgSize Size of message (in Byte) (Insert sizeof(aData))
* @param msgCnf Specifies the type of msg
*      - request/data -> CAN_RTR_REMOTE / CAN_RTR_DATA
*      - send all/only new -> CANdef_ALLMSG / CANdef_NEWMSG
* @param aData Array containing the payload. Not depends to size
* @return HAL_StatusTypeDef : HAL_BUSY=buffer is full
*/
HAL_StatusTypeDef CAN1bus_SendData(uint16_t msgID, size_t msgSize, uint16_t msgCnf, uint8_t aData[]);

#ifdef __EXTENDED_CAN_ACTIVATE
HAL_StatusTypeDef CAN1bus_ExtendedSendData(uint32_t msgID, size_t msgSize, uint8_t aData[]);
#endif

#ifdef _DUAL_CAN_ACTIVATE
HAL_StatusTypeDef CAN2bus_SendData(uint16_t msgID, size_t msgSize, uint16_t msgCnf, uint8_t aData[]);
#endif  //_DUAL_CAN_ACTIVATE

#endif /* INC_DRAGON_CANBUS_H_ */
#ifdef __cplusplus /* __cplusplus */
}
#endif/* __cplusplus */
